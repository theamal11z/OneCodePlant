[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "onecode-plant-cli"
description = "Intelligent ROS2 development tooling and unified workflows"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "Apache-2.0"}
authors = [
    {name = "OneCode Plant Team", email = "team@onecode-plant.org"},
]
maintainers = [
    {name = "OneCode Plant Team", email = "team@onecode-plant.org"},
]
keywords = [
    "robotics",
    "ros2", 
    "cli",
    "automation",
    "development",
    "workflow",
    "build-tools",
    "simulation",
    "navigation",
    "colcon",
    "gazebo",
    "nav2",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Build Tools",
    "Topic :: System :: Software Distribution",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Environment :: Console",
    "Framework :: Robot Framework",
    "Topic :: Scientific/Engineering :: Robotics",
]
dependencies = [
    "click>=8.0.0",
    "PyYAML>=6.0",
    "setuptools>=45.0.0",
]
dynamic = ["version"]

[project.urls]
Homepage = "https://github.com/onecode-plant/onecode-plant-cli"
Documentation = "https://onecode-plant.github.io/onecode-plant-cli/"
Repository = "https://github.com/onecode-plant/onecode-plant-cli.git"
"Bug Reports" = "https://github.com/onecode-plant/onecode-plant-cli/issues"
Changelog = "https://github.com/onecode-plant/onecode-plant-cli/blob/main/CHANGELOG.md"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=4.0.0",
    "mypy>=0.990",
    "pre-commit>=2.20.0",
]
docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=8.5.0",
    "mkdocs-mermaid2-plugin>=0.6.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
    "pytest-benchmark>=4.0.0",
]
all = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=4.0.0",
    "mypy>=0.990",
    "pre-commit>=2.20.0",
    "mkdocs>=1.4.0",
    "mkdocs-material>=8.5.0",
    "mkdocs-mermaid2-plugin>=0.6.0",
    "pytest-benchmark>=4.0.0",
]

[project.scripts]
onecode = "onecode.cli:main"

[project.entry-points."onecode.plugins"]
colcon = "onecode.plugins.colcon_plugin:ColconPlugin"
simulation = "onecode.plugins.sim_plugin:SimulationPlugin"

[tool.setuptools]
packages = ["onecode", "onecode.core", "onecode.plugins", "onecode.workflows"]
include-package-data = true

[tool.setuptools.package-data]
onecode = ["configs/*.yaml", "configs/*.yml"]

[tool.setuptools.dynamic]
version = {attr = "onecode.__version__"}

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | install
  | log
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
include_trailing_comma = true
known_first_party = ["onecode"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# mypy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=onecode",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "requires_ros2: marks tests as requiring ROS2 installation",
    "requires_colcon: marks tests as requiring Colcon installation", 
    "requires_gazebo: marks tests as requiring Gazebo installation",
    "performance: marks tests as performance benchmarks",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["onecode"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "*/venv/*",
    "*/.venv/*",
    "*/build/*",
    "*/dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# flake8 configuration
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "build",
    "dist",
    "install",
    "log",
    "*.egg-info",
]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:S101,S602,S603,S607",
]
max-complexity = 10

# Pre-commit hooks configuration
[tool.pre-commit]
repos = [
    {
        repo = "https://github.com/pre-commit/pre-commit-hooks",
        rev = "v4.4.0",
        hooks = [
            {id = "trailing-whitespace"},
            {id = "end-of-file-fixer"},
            {id = "check-yaml"},
            {id = "check-added-large-files"},
            {id = "check-json"},
            {id = "check-toml"},
            {id = "check-xml"},
            {id = "check-merge-conflict"},
            {id = "debug-statements"},
            {id = "mixed-line-ending"},
        ]
    },
    {
        repo = "https://github.com/psf/black",
        rev = "22.12.0",
        hooks = [
            {id = "black", language_version = "python3"}
        ]
    },
    {
        repo = "https://github.com/pycqa/isort",
        rev = "5.12.0",
        hooks = [
            {id = "isort"}
        ]
    },
    {
        repo = "https://github.com/pycqa/flake8",
        rev = "6.0.0",
        hooks = [
            {id = "flake8"}
        ]
    },
    {
        repo = "https://github.com/pre-commit/mirrors-mypy",
        rev = "v0.991",
        hooks = [
            {id = "mypy", additional_dependencies = ["types-PyYAML"]}
        ]
    },
]

# Bandit security linter configuration
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]  # Skip assert statements and shell injection (for subprocess calls)

# Safety dependency checker configuration
[tool.safety]
# Ignore specific vulnerabilities if needed
# ignore = ["12345"]
